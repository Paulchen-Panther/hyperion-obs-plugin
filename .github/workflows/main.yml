name: hyperion-obs
on: [push, pull_request]

env:
  PLUGIN_NAME: hyperion-obs
  OBS_VERSION: 28.0.0-rc1

jobs:
  linux:
    name: 'Linux'
    runs-on: ${{ matrix.ubuntu }}
    strategy:
      fail-fast: false
      matrix:
        ubuntu: ['ubuntu-20.04', 'ubuntu-22.04']
    steps:
      - name: 'Checkout OBS Studio'
        uses: actions/checkout@v3.3.0
        with:
          repository: obsproject/obs-studio
          ref: ${{ env.OBS_VERSION }}
          submodules: 'recursive'

      - name: 'Checkout hyperion-obs'
        uses: actions/checkout@v3.3.0
        with:
          path: plugins/${{ env.PLUGIN_NAME }}
          submodules: 'true'

      - name: 'Add hyperion-obs to plugins'
        shell: bash
        run: echo "add_subdirectory(${{ env.PLUGIN_NAME }})" >> plugins/CMakeLists.txt

      - name: 'Fetch hyperion-obs version'
        id: version
        uses: notiz-dev/github-action-json-property@release
        with: 
          path: 'plugins/${{ env.PLUGIN_NAME }}/buildspec.json'
          prop_path: 'version'

      - name: 'Install OBS Studio Dependencies'
        run: CI/linux/01_install_dependencies.sh --disable-pipewire

      - name: Install Flatbuffers
        run: sudo apt-get install -y libflatbuffers-dev

      - name: 'Configure and Build OBS Studio with hyperion-obs'
        shell: bash
        run: |
          mkdir ./build
          cmake -S . \
            -B "./build" \
            -G Ninja \
            -DCMAKE_BUILD_TYPE="RelWithDebInfo" \
            -DLINUX_PORTABLE=OFF \
            -DWITH_RTMPS=OFF \
            -DBUILD_CAPTIONS=OFF \
            -DBUILD_BROWSER=OFF \
            -DBUILD_VIRTUALCAM=OFF \
            -DBUILD_VST=OFF \
            -DENABLE_NEW_MPEGTS_OUTPUT=OFF \
            -DENABLE_AJA=OFF \
            -DENABLE_PIPEWIRE=OFF \
            -DENABLE_ALSA=OFF \
            -DENABLE_V4L2=OFF \
            -DENABLE_PULSEAUDIO=OFF \
            -DENABLE_VLC=OFF \
            -DENABLE_SCRIPTING=OFF \
            -DENABLE_DECKLINK=OFF
          cmake --build "./build"

      - name: 'Package'
        shell: bash
        run: |
          FILE_NAME=${{ env.PLUGIN_NAME }}.${{steps.version.outputs.propStr}}-${{ matrix.ubuntu }}.tar.gz
          echo "FILE_NAME=${FILE_NAME}" >> $GITHUB_ENV
          mkdir -p ./${{ env.PLUGIN_NAME }}/bin/64bit/
          mv ./build/plugins/${{ env.PLUGIN_NAME }}/${{ env.PLUGIN_NAME }}.so ./${{ env.PLUGIN_NAME }}/bin/64bit/${{ env.PLUGIN_NAME }}.so
          mv ./plugins/${{ env.PLUGIN_NAME }}/data ./${{ env.PLUGIN_NAME }}/data
          tar -cvzf "${FILE_NAME}" ${{ env.PLUGIN_NAME }}

      - name: 'Upload'
        if: startsWith(github.event.ref, 'refs/tags') || github.event_name == 'pull_request'
        uses: actions/upload-artifact@v3.1.2
        with:
          name: '${{ env.FILE_NAME }}'
          path: '*.tar.gz'

  windows:
    name: 'Windows'
    runs-on: [windows-latest]
    strategy:
      fail-fast: true
      matrix:
        target: [x64, x86]
        include:
          - target: x64
            cmake_build: 'x64'
            deps_ext: '64'
          - target: x86
            cmake_build: 'Win32'
            deps_ext: '32'
    env:
      QT_VERSION: '6.3.1'
      CMAKE_GENERATOR: "Visual Studio 17 2022"
      CMAKE_SYSTEM_VERSION: "10.0.18363.657"
      WINDOWS_DEPS_VERSION: '2022-08-02'
    steps:
      - name: 'Add msbuild to PATH'
        uses: microsoft/setup-msbuild@v1.1.3

      - name: 'Checkout OBS Studio'
        uses: actions/checkout@v3.3.0
        with:
          repository: obsproject/obs-studio
          ref: ${{ env.OBS_VERSION }}
          submodules: 'recursive'

      - name: 'Checkout hyperion-obs'
        uses: actions/checkout@v3.3.0
        with:
          path: plugins/${{ env.PLUGIN_NAME}}
          submodules: 'true'

      - name: 'Add hyperion-obs to OBS Studio plugins'
        shell: cmd
        run: echo add_subdirectory(${{ env.PLUGIN_NAME }}) >> plugins/CMakeLists.txt

      - name: 'Fetch hyperion-obs version'
        if: success()
        id: version
        uses: notiz-dev/github-action-json-property@release
        with: 
          path: 'plugins/${{ env.PLUGIN_NAME }}/buildspec.json'
          prop_path: 'version'

      - name: 'Install OBS Studio Dependencies'
        run: |
          curl -kLO https://github.com/obsproject/obs-deps/releases/download/${{ env.WINDOWS_DEPS_VERSION }}/windows-deps-qt6-${{ env.WINDOWS_DEPS_VERSION }}-${{ matrix.target }}.zip -f --retry 5 -C -
          curl -kLO https://github.com/obsproject/obs-deps/releases/download/${{ env.WINDOWS_DEPS_VERSION }}/windows-deps-${{ env.WINDOWS_DEPS_VERSION }}-${{ matrix.target }}.zip -f --retry 5 -C -
          7z x windows-deps-qt6-${{ env.WINDOWS_DEPS_VERSION }}-${{ matrix.target }}.zip -o"${{ github.workspace }}/cmbuild/deps"
          7z x windows-deps-${{ env.WINDOWS_DEPS_VERSION }}-${{ matrix.target }}.zip -o"${{ github.workspace }}/cmbuild/deps"

      - name: 'Restore Flatbuffers from vcpkg'
        uses: actions/cache@v3.2.3
        id: vcpkg
        with:
          path: C:/vcpkg/installed
          key: windows-${{ matrix.target }}-vcpkg

      - name: 'Install Flatbuffers from vcpkg'
        shell: cmd
        if: steps.vcpkg.outputs.cache-hit != 'true'
        run: |
          vcpkg install flatbuffers:${{ matrix.target }}-windows
          vcpkg integrate install

      - name: 'Configure and Build OBS Studio with hyperion-obs'
        run: |
          mkdir ./build
          cmake -S . `
            -B "${{ github.workspace }}/build" `
            -G"${{ env.CMAKE_GENERATOR }}" `
            -DCMAKE_PREFIX_PATH:PATH="${{ github.workspace }}/cmbuild/deps" `
            -A"${{ matrix.cmake_build }}" `
            -DCMAKE_SYSTEM_VERSION="${{ env.CMAKE_SYSTEM_VERSION }}" `
            -DBUILD_BROWSER=FALSE `
            -DBUILD_VST=FALSE `
            -DBUILD_VIRTUALCAM=FALSE `
            -DBUILD_CAPTIONS=FALSE `
            -DCOMPILE_D3D12_HOOK=FALSE `
            -DENABLE_SCRIPTING=FALSE `
            -DDepsPath="${{ github.workspace }}/cmbuild/deps" `
            -DDepsPath${{ matrix.deps_ext }}="${{ github.workspace }}/cmbuild/deps" `
            -DQTDIR="${{ github.workspace }}/cmbuild/deps/qt6" `
            -DCOPIED_DEPENDENCIES=FALSE `
            -DCOPY_DEPENDENCIES=TRUE `
            -DENABLE_PLUGINS=TRUE `
            -DDISABLE_PLUGINS=FALSE `
            -DENABLE_BROWSER=FALSE `
            -DENABLE_WEBSOCKET=FALSE `
            -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake
          msbuild /m /p:Configuration=RelWithDebInfo .\build\obs-studio.sln

      - name: 'Package'
        if: success()
        run: |
          mkdir ./package
          robocopy .\build\rundir\RelWithDebInfo\obs-plugins\${{ matrix.deps_ext }}bit\ .\package\obs-plugins\${{ matrix.deps_ext }}bit ${{ env.PLUGIN_NAME }}.* /E /XF .gitignore
          robocopy .\build\rundir\RelWithDebInfo\data\obs-plugins\${{ env.PLUGIN_NAME }}\ .\package\data\obs-plugins\${{ env.PLUGIN_NAME }}\ /E /XF .gitignore
          copy .\build\plugins\${{ env.PLUGIN_NAME }}\Windows.iss .\Windows.iss
          copy .\plugins\${{ env.PLUGIN_NAME }}\LICENSE .\LICENSE
          $env:FILE_NAME="${{ env.PLUGIN_NAME }}.${{steps.version.outputs.prop}}-windows-${{ matrix.target }}"
          echo "FILE_NAME=${env:FILE_NAME}" >> ${env:GITHUB_ENV}
          iscc .\Windows.iss /O. /F"${{ env.FILE_NAME }}"
          exit 0

      - name: 'Upload'
        if: success()
        uses: actions/upload-artifact@v3.1.2
        with:
          name: '${{ env.FILE_NAME }}-installer'
          path: ./*.exe

  github_publish:
    name: 'Publish GitHub Releases'
    if: startsWith(github.event.ref, 'refs/tags')
    needs: [linux, windows]
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout hyperion-obs'
        uses: actions/checkout@v3.3.0

      - name: 'Fetch hyperion-obs version'
        id: version
        uses: notiz-dev/github-action-json-property@release
        with: 
          path: 'buildspec.json'
          prop_path: 'version'

      # Download artifacts from previous build process
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      # Create draft release and upload artifacts
      - name: Create draft release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ env.PLUGIN_NAME }} ${{steps.version.outputs.propStr}}
          tag_name: ${{ env.TAG }}
          files: "artifacts/**"
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
